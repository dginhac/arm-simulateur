define("ace/mode/assembly_arm_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var AssemblyARMHighlightRules = function() {

    this.$rules = { start:
       [ { token: 'keyword.control.assembly',
           regex: '\\b(MVNLS|LDRLSH|SUBGES|LSRLS|UMULLEQ|LDRPLBT|RRXCC|STMVSFA|STMALFA|ADCVCS|LDMVCDB|MVNAL|ADDALS|LDRPLH|STCPLL|LSLCCS|STMFD|STRCSH|LDRHIH|STRGE|TSTCS|MULHIS|SMLALHI|PUSHPL|BXCC|SBCLSS|STRLEH|STMCCFA|MULHI|STMCC|LDRHIBT|UMULLNES|ADCVC|LSL|RSCCS|LDRLS|RRXAL|ADDCCS|CDPGE|STRSH|EOREQ|CDPGT|UMULLVCS|STMVC|UMLALVSS|CMNMI|MVNGTS|STRVS|NOPCS|LDMLSIA|ADDGE|SMLALS|STCHIL|BLHI|STRNEH|UMLALCS|EORGES|LDMMIFA|LDMGTDB|MOVLES|UMULLLS|SBCMIS|RORALS|SMLALPL|SMLAL|SWPMIB|MULAL|BICLS|LDMLEFA|UMLALNES|STMLSFA|MVNNES|STCCSL|MRSNE|STMPLFD|LDRGESB|STMGTDB|BGE|LDMLSIB|SUBMI|MLACC|MULS|STMIA|ADCLTS|STRGESB|PUSHLE|STMLSFD|BXNE|EORCS|SUBHIS|ANDNE|RSBPLS|ANDCSS|STMCCFD|STCMI|STRHISB|STMCCED|RSCEQS|BXPL|LDRALB|BLCS|ADCCCS|STRVSSH|STMALDA|ADCHI|LDMIA|STMNE|EORNES|STMLEDB|SUBLT|RSBNES|MOVLE|BX|EORAL|STMVCIA|LDMLEFD|STMLSED|STC|STMLEFD|STMALED|ORRHIS|STCLT|CDPNE|LDRALT|LDRVCSH|MCRGE|LDRGEBT|ADDLS|UMULLNE|LDRMISB|STMVSDA|STMLTED|LDRGE|LDMVS|MVNGES|LDRGTT|SWIPL|BLS|STMLEDA|POPLE|RRXS|MLAMIS|EORVSS|MVNGT|ASRCCS|MRSAL|LDMFD|RSBCCS|LDRLT|STCGTL|MOVEQS|STCVSL|STMLEIA|STRT|MOVALS|LDMLT|LDCVC|MOVVC|SMLALVCS|MLANE|PUSHVC|STMEQ|RSCLT|TEQVS|LDCCCL|LDRCST|TSTLE|ANDMIS|EORCCS|TEQAL|SWPCCB|STRLSSH|LDREQ|STMAL|RRXMI|MLAS|BICEQS|STMED|STMGTFD|SUBGTS|STRPLBT|LDRHISH|MULCSS|LDRPLT|UMULLLES|LDMCCEA|STRPLSH|ANDNES|STMHIEA|LSLHIS|RSC|LDMMIED|LDCLTL|LDMGEDB|LDMCCIA|STRVSH|MRCLT|LDRLSB|UMULLS|LDRPL|MLAHI|LDMGTIB|SMULLMI|LDRPLB|LDRLEB|STCMIL|CMPLE|LDRGET|BLCC|ORRGTS|LDRALBT|SMULLEQS|STRVCSB|STMHIFA|LSRLTS|STMHIED|STRHIT|RSCVC|SBCS|CMNVS|STMLEEA|RRXVSS|PUSHEQ|SBCLS|RRXNE|CDPVS|LDMEQFD|MLAGT|ORRGT|ASR|EORPLS|ORRAL|MRCVC|MCRVC|LDRHI|ADDLES|UMLALHIS|LSLGTS|ANDVC|SUBLE|MOVCC|LDMVSFA|LDMHIEA|RORMI|RORNE|STMDB|CDPLS|STMHI|UMULLLE|LDMPLEA|MULGTS|EOREQS|STCPL|CDPCC|RSCLS|RRXLTS|SWPLSB|LDRVSH|STRCSSH|LSREQS|LDRVSBT|STRGET|SWIVC|UMULLAL|MSRVS|LSRLE|MLAVCS|LDRCCSB|STMHIFD|STRCSB|RORCSS|SUBHI|EORLT|POPGE|ANDVS|LDMMIIA|BXMI|LDRHIB|RORLES|ADDNES|MLACCS|LDRLTB|ADCEQ|RORPLS|BLEQ|ANDGES|LDMCS|UMLALCSS|SWPEQB|ORRVCS|LDMVCIB|BLGT|LDMDB|MVNMIS|TSTNE|SUBLTS|NOPVC|UMULLMI|MVNVS|ORRVSS|STRVSBT|LDMALDA|LDMMI|BICCCS|UMLALGT|LSLNE|BXLS|STRVC|LDMLTDA|STRLESB|CMNVC|STRVST|LDRLTBT|PUSHLT|STRPLH|SWPPL|ORRGE|LDRLSSH|ASREQ|MOVCS|STCLTL|LDCVCL|LDMEQED|RORVS|SUBNES|STMCSDB|LDMMIIB|SUBCS|RORLTS|NOPHI|UMULLGES|MULGES|UMLALLS|RSBNE|NOPLS|MRCCS|MVNMI|ADDCSS|STRALSB|SBCLT|MRCHI|STMALFD|LDCHIL|RORNES|STMGE|STMNEEA|STRGTB|LDMHIED|ADCLS|STREQT|SWPPLB|SUBEQS|SWPLTB|LSRLSS|LDRH|MVNALS|RSCHI|ANDLTS|RRXPL|STCNE|EORLS|STMVCEA|ADCCC|MVNCS|ASRVC|BLE|TSTEQ|STMCSDA|LDMLTFA|STCL|STCAL|BICHI|STMGEDA|STMCSEA|BICMI|STRALSH|ASRLT|MLAHIS|TSTAL|TEQLS|STREQSB|STMVSED|MCRGT|RSBHI|SMULLCSS|LSLVC|RSCVS|MSRCC|MSRHI|MRSHI|BICALS|STMLSIB|MSRLT|SUBGE|RRXVCS|STCLS|LDREQB|MLAALS|ADDAL|POPVC|STRNEB|ANDLES|LDRLESH|RSBMIS|ADCGT|LDMVSFD|BPL|UMULLGE|UMULLVC|MVNCSS|TEQLT|LSLHI|STCCC|MLALES|SMLALGE|STRLST|STMMIFD|MOVPLS|UMULLHI|STRBT|STMGTDA|SMLALLE|LDMGTIA|PUSHGT|LDMVSDB|POPCS|ORRALS|UMULLCCS|STMLSIA|TEQGT|LDCAL|SMLALCCS|STMGTFA|MLAVC|LDMPLFD|LSLPLS|LDMLEED|MRCAL|ADDHIS|NOPCC|SMLALNES|STMVSIA|STRGTT|LDMDA|STMLTIA|LDRVS|LDCMIL|STMHIIB|SMLALLS|LDRLST|LDMMIEA|ORR|LSLNES|MRS|STMVCIB|LDRAL|MULLSS|PUSHNE|BICVC|LDMCCIB|LDC|MOVCSS|LDCL|LDMALIA|LDRSB|LDRCSSB|ANDMI|ORRLTS|RORAL|MVNLE|SBCVSS|UMLALALS|MLACSS|MOVMI|LDRCCB|RSCNE|SUBCSS|LDCLS|BICPLS|LDMVC|MRSGT|LDRLTSH|SWIGE|SMLALGT|MVNLSS|STRLTBT|UMLALLE|RORLT|LSRVS|RSBLTS|STRLSSB|ADDVS|MOVLTS|ROREQ|LDRMIBT|CMPMI|STRLEB|SMULLCS|SBCLE|ANDGT|STRCST|LDCLSL|STMGTED|CMPVS|LDRCCBT|LDCLE|MLACS|LDMHIFA|LDMGEIB|ADDLT|MOVNES|LDMNEIB|LDRALSB|BICCSS|LDMGEFA|MLALT|LDMGEED|RRXLES|LSRPLS|SMLALMIS|POPCC|ADCNES|POPLS|SBCALS|BICAL|LDMGEDA|SBCPL|RSBMI|STMNEFA|LSLCSS|MVN|MVNPLS|STRLSBT|ASRVCS|STRHI|STRHIB|STMGEIB|LSLVS|BCS|LDRPLSH|BXLT|RSBAL|RORLE|SWPCSB|SUBLSS|BICNE|RSCPL|MVNNE|SMLALLES|SWIVS|MVNHIS|LDMPLFA|SMULLGE|LDMGTEA|LDMVCFD|MOV|EORLTS|LDMIB|LDCNE|ASRVSS|STMNEIA|LDRLSBT|MOVNE|LSLEQS|UMLALEQ|SMLALPLS|STMPLDA|EORLES|SBCLTS|LDCMI|LDRGT|STMMIIA|LDREQH|BNE|STMDA|LDRGTBT|STRVCBT|MULLES|LDMGTDA|MULCCS|STRLTSB|SUBVSS|ANDS|LDRHISB|ANDVCS|LDMVSED|SMLALLTS|SWPHI|STCALL|STMCSFD|ANDGTS|STCNEL|UMULL|ASRVS|ASRLTS|CDPPL|NOPMI|LDMMIFD|MVNVC|NOPGT|MSRLS|RORHIS|LDMGEEA|ORRMIS|SBCEQS|BXLE|LDMVSIA|SWILS|RSCPLS|MCR|BICVS|POPAL|MSR|MOVGT|LDRLTT|STMNEIB|ANDALS|RORCS|BICCC|MULEQS|UMLALHI|LDRLEBT|STRHISH|RORS|RSBS|UMULLCC|LDCCS|LDMGTFD|MCRLS|SBCCSS|STMLEIB|LDMLSEA|CMNEQ|BICLSS|ADDMI|PUSHGE|TEQHI|UMLALMIS|LSLPL|STRGTSB|UMLALAL|MLANES|SWILT|CMNCS|MVNS|RORPL|LSRCC|CDPVC|ASRGT|BGT|RRXEQ|LDMNEED|LDCALL|LDCCC|ORRLT|RSBPL|ADDGT|MULPL|ORRLS|RRXEQS|ADDEQ|RSBLT|LDRVCBT|MULPLS|BXVC|ASRHI|LDREQT|LDMALIB|STMLT|STRCCB|RRXCCS|UMLALPLS|POP|TEQCS|ADCS|UMLALNE|LDRB|CMP|SBCVC|BLAL|NOPAL|SMULLMIS|MULVC|LDCGE|STRGEBT|LDMCSFD|LDMPLED|ORRMI|STMLEFA|RSBEQ|BVC|LSLMI|CMPPL|ADDPL|ADDLTS|STMCCIA|RORVSS|LDMNEDA|STREQSH|BAL|SBCVCS|LDRPLSB|STMNEFD|MRSLT|SUBAL|LDRCS|SMLALEQ|LDRVCSB|RORGTS|STRCSBT|UMULLLSS|LDRVSSB|MCRLE|UMLALCCS|ANDCCS|LDMVSDA|EORLSS|SWPGTB|MCRNE|MOVHIS|LSLCC|ADCALS|LDMLTEA|STMPLIB|RSCEQ|ASRS|SWIHI|MSRGT|LDMVCIA|LDMCCFD|BXAL|STRALBT|STRNE|SMULLGTS|SMULLNE|STRB|STMPLFA|ADCPL|RSBGTS|STRPL|LSRALS|LDRNEB|LDMLEIA|MSRVC|MSRNE|SMLALCS|UMLALLT|ADCMIS|SWPB|SMULLS|LDRCCH|STRVSSB|LDRGEH|ANDVSS|SMLALCSS|SMLALVSS|SUBLS|ORRLE|TEQGE|CMPNE|SMULLVS|TEQ|LSLGES|SMULLVCS|SUBPL|STMGEED|RSBHIS|STREQBT|ADCLT|LDR|LDRBT|ADCAL|PUSHCC|STMNEED|ORRPL|MVNEQ|MRC|STMVSIB|STMMIDB|STMGTIB|STMALDB|STRSB|STMLTFA|STCHI|RORGE|RRXALS|LDRVC|LSLCS|MOVAL|STMEQEA|LDMVSIB|SMULLHIS|STMPLDB|LDMNEIA|STMMIFA|STMPLEA|CMPHI|CMNGE|SWPMI|BLLT|LSRGES|LDMLSFD|LDMALDB|TSTGE|STCEQ|BICGES|STMVSDB|STRLTSH|MOVGES|MOVGTS|MRSLE|STMEQIB|STMHIDA|LDMEQFA|LSRMIS|LDCNEL|ADCGE|STMGEFA|LSLS|TSTHI|UMLALGE|CDPMI|TEQPL|ANDLE|TSTGT|SWI|ORRGES|POPPL|STCVC|SMULLLES|ADCPLS|EORHIS|SWPCS|MLA|MRCGT|RORCC|LSRS|SWPGT|ASRLES|STRCCBT|ANDHI|MLAGES|LDRMIT|LDMVSEA|LDMEQDB|EOR|LSLGE|LDMLEIB|ASRGTS|RSBLES|LSRCSS|LDMGTFA|LDMHIIB|LDMPLDA|MULVCS|SBCMI|LDMHI|POPVS|SBCGE|UMULLMIS|SUBVCS|ANDCS|RSBEQS|MULLS|BHI|LDRNET|STRLTT|ORRS|LDCGTL|ASRGES|RRXNES|LDRT|SBCCS|ASRCS|STMCCDB|STMHIIA|MCRPL|LDMCC|TSTVC|LSRVC|SWPNEB|LDRVCB|STCVS|PUSHAL|RSBVS|STMGEDB|SBCNES|SUBVS|LDRCSBT|STRGT|RSBCS|LSRLES|LSLLSS|SMLALGTS|MULNES|RSBGT|ADCCSS|STRGEB|LDM|MRCVS|MVNCC|STRLT|RORHI|RSCCC|UMLALMI|MOVLT|LDMLTFD|STR|RSCS|ADCNE|SMLALHIS|SBCGT|SWPLE|LDMLTED|LSRGE|MULLTS|CMNCC|STMNEDA|POPGT|STRH|ASRNES|LDREQSB|BIC|LSLALS|LDMHIIA|CDPAL|RSB|LSRCS|EORVS|BICEQ|LDCVS|NOPEQ|NOPLT|STRCSSB|PUSHMI|UMULLGTS|ADDVC|SMULLHI|RORVC|UMLALGES|SMLALVS|BICS|ADCGES|STMNEDB|MOVMIS|ANDEQ|MOVVS|STRPLT|STCLE|RSCCCS|STRAL|SMULLGT|EORMIS|MULLT|SBCCC|SBCLES|MLALSS|RORCCS|MULGE|ANDAL|ADDGES|LDMHIDB|ADDVCS|MVNPL|SMLALMI|CMNLT|SWPLT|UMLALVS|MLALTS|LDRLEH|LDMLTDB|STRMIH|LDMCCDB|LDREQBT|LDMGEIA|LSR|UMLALS|LDMALFA|RRXCSS|STMMIDA|LDMEQIB|ADCCS|LDMALFD|ORRPLS|SWPGEB|MLAGTS|ROR|ASRALS|STMMIIB|MRCCC|ADDGTS|LDRCCT|LDRMI|CMPLS|LSLLES|BICVSS|CMPVC|STMLS|CMNHI|ADDCC|STRMISH|SWICC|LSRMI|SMLALNE|MUL|LDRVCT|LDCCSL|UMLALCC|SUBS|LDRNEBT|ASRLSS|UMLALGTS|UMLALLTS|NOPGE|STRCCSH|STMHIDB|RRXPLS|SUBLES|STRMISB|CDPEQ|STMLTDA|SMULLCC|EORNE|LSREQ|STMPLED|ANDLS|SUBVC|RORLS|TEQLE|STRHIBT|MULCC|STMCSED|EORALS|ORRNES|STREQ|EORMI|LDMVCDA|ROREQS|MOVLSS|SMLALALS|RRX|POPEQ|CMNNE|RSBLS|LDMEQDA|EORPL|MRSCS|TEQCC|STMMI|MOVCCS|RSCGE|LSLVSS|STRLSH|LSLLE|STMCS|ORREQS|MULEQ|LDRCSH|ORRNE|STRMI|POPNE|SMULLVSS|MRSLS|SMULLAL|STRLTB|EORVCS|LSLVCS|SBCNE|ORRVS|RRXVC|SUBCCS|LSRVCS|CMNPL|STMCSIA|SUBGT|RSBALS|TEQNE|SMULLLTS|LDRNEH|SWILE|ASRMIS|SWPHIB|MLAEQS|STMPL|STRMIBT|MLAMI|LDRALH|LDCEQL|STRLTH|UMLALLSS|CDP|MSRCS|SMLALCC|CMPAL|LDRVSB|BXGT|UMLALVCS|BLNE|EORGT|LDMCSEA|RSCALS|RRXGTS|SWPGE|ADDLSS|STRGTBT|LDMPLDB|LDMFA|STRMIT|SMULLPL|LDCVSL|NOPNE|STMLE|LDRMIB|UMULLVSS|LDCEQ|CMPGT|NOPLE|LDMLSFA|LDMNEEA|LDRNESB|LDMEA|SMLALLSS|MVNEQS|LDRVCH|CDPCS|CMPCS|LSRHI|MLAVSS|BEQ|TSTLT|LDRLET|RRXLT|SBC|ANDCC|LSRHIS|LDRLE|STMALIB|UMLALPL|ASRLE|BMI|BICLES|STRALH|STMEQDB|RSCGTS|EORCSS|LSRGTS|LDMGEFD|STRVCSH|STCEQL|STRCS|MVNGE|STMEQDA|RRXMIS|BICLT|LDMLTIB|STMCCEA|STRVCH|STRGEH|MOVEQ|RSCNES|LSRNES|TEQMI|STRLESH|RSBVSS|EORHI|RSCCSS|CDPLT|BCC|RSBVCS|STRCC|MCRMI|MVNHI|EORLE|LDRLESB|RSCHIS|SWIAL|STMLSDB|RSCLSS|RRXLSS|LDMCSFA|BICPL|PUSHVS|SBCPLS|STRNESB|MCRLT|ADDVSS|LDRGTSB|CMPGE|RSCLE|SWPLEB|BICCS|LDRVSSH|LDRNESH|BLGE|LDMLSED|ANDHIS|STMVCDA|RSCVCS|LDRNE|MRCLE|MCRCS|BXGE|STMVSFD|TSTMI|ASRNE|TSTLS|SMULLPLS|STRCCT|LDMGT|MCRVS|LDRLTSB|LSRLT|PUSHHI|ADCLES|ADDPLS|STMLSEA|LSRPL|SWIGT|MULVS|UMULLALS|ANDEQS|ADDS|RRXGT|BICHIS|SWPALB|RSCGT|ORRCCS|SBCGES|RSBGE|ADDNE|SBCVS|RSBVC|MVNLTS|MLAVS|UMLALLES|ORRVC|LDCPLL|SMULL|STCGT|ASRCC|UMLALEQS|STRGTH|MLAGE|LDRCC|RORMIS|STREQH|SWIMI|STMGTIA|LDMCCFA|MRCLS|BICGE|SWPVS|LSLGT|CMN|UMULLEQS|LDMMIDB|BLPL|LDRGTB|LDMGTED|STCCS|SMULLGES|UMULLCS|UMULLLTS|SMULLNES|LDMGE|TSTCC|MRCPL|SMULLCCS|LDMAL|UMULLLT|CDPHI|LSLAL|PUSH|SUB|STM|LDMLEDA|BLVS|RSCVSS|MOVPL|UMULLCSS|MOVVSS|SMLALGES|BICLE|BXVS|MSRLE|LDMLSDA|MSRGE|ADCLSS|STMALIA|ORRCS|LDRCCSH|LDRCSB|RRXHI|STMGT|LSLMIS|LDMLS|MRSVS|STCLEL|MRSEQ|STMMIEA|MULMIS|ADCMI|MRSMI|NOP|STMPLIA|ASRMI|SUBMIS|STMLTIB|STMEQFD|LDMLSDB|SWPEQ|ADC|SWPLS|BLT|STMLTFD|ANDPLS|LDCHI|LDMVCEA|LDMPLIA|RORGES|LDMCSED|UMULLGT|STMEQIA|STRLS|ADCHIS|SMULLLT|UMLALVC|LSRVSS|RORLSS|RSCLES|CMPEQ|RSCAL|ASRAL|STMLTEA|SMLALAL|POPMI|STMVCDB|LSLLTS|STRLEBT|MOVGE|STMCSIB|TSTPL|ORREQ|MRSPL|LDMEQ|LDRGTH|SMLALLT|SWPCC|LDMPLIB|STRMIB|RSCLTS|LDMCSIA|MOVS|LDMHIFD|RRXCS|STMFA|MSRMI|LSRCCS|ADCEQS|STRNET|LDMCSIB|B|ADDCS|RSBGES|MLALS|EORS|SUBEQ|SWPNE|STRLE|BXHI|LSLEQ|MULCS|STMALEA|STCVCL|MULLE|STMCSFA|LSRNE|MULGT|LDMLE|STMVCFA|MULMI|STCCCL|RSBLE|UMULLPL|SBCHIS|LSLLT|STRALB|MCRCC|RRXLE|STMCCDA|UMULLPLS|STMEA|RRXVS|ADDEQS|LDRSH|STMVCFD|MVNVSS|MLAPLS|STRHIH|STRCCSB|SBCHI|LDMLEDB|RRXHIS|MCRHI|BLLE|RSBLSS|ANDLSS|ANDGE|LDRLSSB|POPLT|MOVVCS|SWPVSB|ORRLES|TSTVS|ADCVSS|MULNE|LDRVST|ORRHI|LDMEQIA|EORGTS|CMNLE|SMULLLSS|STMEQFA|BL|RSCGES|LSRAL|RSCMIS|LDMCCDA|ORRCSS|CMNAL|LSRGT|CMNLS|SMULLLS|LDRMISH|MRSGE|LDCGEL|MLAAL|SMULLALS|STRVCT|LDMMIDA|SUBPLS|RSBCC|STMLSDA|MCRAL|ADD|MCREQ|STRGTSH|LDRGTSH|SWPVC|LDMVCED|LDCGT|RRXLS|BICLTS|SWICS|STMVSEA|MSRPL|RORVCS|ASRCSS|BLMI|ADDMIS|LDRLTH|LSLLS|STRVSB|MLAPL|STRCCH|MVNVCS|LDRHIT|EORGE|MULALS|BICVCS|TST|MLALE|LDCPL|STMVS|AND|STMLEED|NOPPL|CDPLE|SBCGTS|BVS|BICGT|CMPLT|SMULLEQ|SBCAL|STRVCB|SBCCCS|STRALT|PUSHCS|TEQVC|LDMNEDB|BICNES|STMGEIA|MVNLT|SMULLVC|LDRGEB|LDMVCFA|SWIEQ|STMGEFD|STRPLSB|STRLSB|SMULLLE|LDMCCED|BLVC|LDMHIDA|UMULLVS|TEQEQ|BXCS|STMVCED|LDMED|RRXGE|STMMIED|LDMCSDA|SUBALS|STCGE|PUSHLS|ORRLSS|MVNCCS|SWINE|SWPAL|BXEQ|RSCMI|LDMALED|ADCVS|STMIB|POPHI|STCLSL|ASRLS|MRCNE|SUBNE|STMGTEA|MRCMI|MSRAL|RSBCSS|NOPVS|EORCC|BLLS|UMULLHIS|SWPVCB|LDMALEA|STRPLB|ORRCC|LDMCSDB|LDMNE|MOVHI|LDRCSSH|LDMNEFA|STRGESH|MULVSS|LDMEQEA|LDMNEFD|MOVLS|LDMPL|LDRMIH|BICMIS|ANDLT|ADDLE|ADCLE|ASREQS|CMNGT|EORVC|MRCEQ|ASRPL|SWP|ASRHIS|STMCCIB|LDCLT|MRSCC|ADDHI|ADCGTS|LDRGESH|UMLAL|SMLALVC|ANDPL|STMGEEA|LDMLTIA|MLAEQ|LDREQSH|LDRALSH|RORGT|MSREQ|LDMLEEA|STREQB|ASRGE|STRLET|MRSVC|STMEQED|LDCLEL|CMPCC|STRNEBT|ASRPLS|MVNLES|STMLTDB|SUBCC|BICGTS|STRNESH|RRXGES|SBCEQ|STCGEL|SMLALEQS|MRCGE)\\b'},
         { token: 'asmcomment.assembly',
           regex: ';.*$' },
         { token: 'variable.parameter.register.assembly',
           regex: '\\b(?:R[0-9]|R1[0-5]|SL|FP|IP|SP|LR|PC|CPSR|SPSR)\\b'},
         { token: 'sectiontitle.assembly',
           regex: 'SECTION\\s(?:INTVEC|CODE|DATA)' },
         { token: 'memdeclare.assembly',
           regex: '\\b(?:ALLOC|ASSIGN)(?:8|16|32)\\b' },
         { token: 'constant.character.assembly',
           regex: '#-?0x[0-9a-fA-F]+' },
           { token: 'constant.character.assembly',
           regex: '#-?[0-9]+' },
         { token: 'label.assembly',
           regex: '^[ \t]*[a-zA-Z0-9_]*' }
    ] }

    this.normalizeRules();
};

AssemblyARMHighlightRules.metaData = { fileTypes: [ 's' ],
      name: 'Assembly arm',
      scopeName: 'source.assembly' };


oop.inherits(AssemblyARMHighlightRules, TextHighlightRules);

exports.AssemblyARMHighlightRules = AssemblyARMHighlightRules;
});

define("ace/mode/folding/coffee",["require","exports","module","ace/lib/oop","ace/mode/folding/fold_mode","ace/range"], function(require, exports, module) {
"use strict";

var oop = require("../../lib/oop");
var BaseFoldMode = require("./fold_mode").FoldMode;
var Range = require("../../range").Range;

var FoldMode = exports.FoldMode = function() {};
oop.inherits(FoldMode, BaseFoldMode);

(function() {

    this.getFoldWidgetRange = function(session, foldStyle, row) {
        var range = this.indentationBlock(session, row);
        if (range)
            return range;

        var re = /\S/;
        var line = session.getLine(row);
        var startLevel = line.search(re);
        if (startLevel == -1 || line[startLevel] != "#")
            return;

        var startColumn = line.length;
        var maxRow = session.getLength();
        var startRow = row;
        var endRow = row;

        while (++row < maxRow) {
            line = session.getLine(row);
            var level = line.search(re);

            if (level == -1)
                continue;

            if (line[level] != "#")
                break;

            endRow = row;
        }

        if (endRow > startRow) {
            var endColumn = session.getLine(endRow).length;
            return new Range(startRow, startColumn, endRow, endColumn);
        }
    };
    this.getFoldWidget = function(session, foldStyle, row) {
        var line = session.getLine(row);
        var indent = line.search(/\S/);
        var next = session.getLine(row + 1);
        var prev = session.getLine(row - 1);
        var prevIndent = prev.search(/\S/);
        var nextIndent = next.search(/\S/);

        if (indent == -1) {
            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? "start" : "";
            return "";
        }
        if (prevIndent == -1) {
            if (indent == nextIndent && line[indent] == "#" && next[indent] == "#") {
                session.foldWidgets[row - 1] = "";
                session.foldWidgets[row + 1] = "";
                return "start";
            }
        } else if (prevIndent == indent && line[indent] == "#" && prev[indent] == "#") {
            if (session.getLine(row - 2).search(/\S/) == -1) {
                session.foldWidgets[row - 1] = "start";
                session.foldWidgets[row + 1] = "";
                return "";
            }
        }

        if (prevIndent!= -1 && prevIndent < indent)
            session.foldWidgets[row - 1] = "start";
        else
            session.foldWidgets[row - 1] = "";

        if (indent < nextIndent)
            return "start";
        else
            return "";
    };

}).call(FoldMode.prototype);

});

define("ace/mode/assembly_arm",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/assembly_arm_highlight_rules","ace/mode/folding/coffee"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextMode = require("./text").Mode;
var AssemblyARMHighlightRules = require("./assembly_arm_highlight_rules").AssemblyARMHighlightRules;
var FoldMode = require("./folding/coffee").FoldMode;

var Mode = function() {
    this.HighlightRules = AssemblyARMHighlightRules;
    this.foldingRules = new FoldMode();
};
oop.inherits(Mode, TextMode);

(function() {
    this.lineCommentStart = ";";
    this.$id = "ace/mode/assembly_arm";
}).call(Mode.prototype);

exports.Mode = Mode;
});
